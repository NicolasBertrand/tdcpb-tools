#!/usr/bin/python
# -*- coding: utf-8 -*-
# -*- Mode: Python -*-
# vim:si:ai:et:sw=4:sts=4:ts=4


import time
import os
import argparse
import logging
import sys
import commands
import socket
import string

import shutil

import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText

from tdcpblib.lftp   import Lftp
from tdcpblib.common import create_logger
from tdcpblib.common import TdcpbException
from tdcpblib.common import parseConfig
from tdcpblib        import CONFIG_FILE
from tdcpblib.tdcpb_checks import tdcpb_check

logger = create_logger()
logger.info('Running exec-done.py')



TPL_RECEPTION_OK = \
"""
Bonjour,

Vous avez reçu le DCP suivant:
DCP:                     $name
Date de Reception:       $time
Repertoire de reception: $dir
Machine:                 $hostname ($ip)

Cordialement
The DCP Bay
"""

TPL_RECEPTION_OK_FTP = \
"""
Bonjour,

Vous avez reçu le DCP suivant:
DCP:                     $name
Date de Reception:       $time
Repertoire de reception: $dir
Machine:                 $hostname ($ip)

RMQ: Le transfert du DCP vers la librairie est en cours.

Cordialement
The DCP Bay
"""

TPL_FTP_OK = \
"""
Bonjour
LE DCP $name à été transféré sur la librairie

Cordialement
The DCP Bay
"""

TPL_FTP_KO = \
"""
Bonjour
L transfert du DCP $name à échoué.

Vous pouvez nous joindre à contacter@tdcpb.org pour vous aider
à resoudre le problème

Cordialement
The DCP Bay
"""



def sendMailReceptionOk(p_torrent_msg, p_config_data) :
    _subject = "[INDE-CP] Reception de {} sur {}".format(p_torrent_msg["name"], p_torrent_msg["hostname"])
    if 'ftp-library' in p_config_data and p_config_data['ftp-library'] == True:
        _tpl = string.Template(TPL_RECEPTION_OK_FTP)
    else :
        _tpl = string.Template(TPL_RECEPTION_OK)

    _tpl_values = {
        'name'      : p_torrent_msg["name"],
        'time'      : p_torrent_msg["time"],
        'dir'       : p_torrent_msg["dir"],
        'hostname'  : p_torrent_msg["hostname"],
        'ip'        : p_torrent_msg["ip"],
        }

    _body = _tpl.substitute(_tpl_values)
    msg = MIMEMultipart()
    msg['Subject'] = _subject
    msg['From'] = p_config_data["expeditor"]

    msg['tdcpb-name'] = p_torrent_msg["name"]
    msg['tdcpb-reception'] = p_torrent_msg["time"]
    msg['tdcpb-reception-dir'] = p_torrent_msg["dir"]
    msg['tdcpb-hash'] = p_torrent_msg["hash"]
    msg['tdcpb-host'] = p_torrent_msg["hostname"]
    msg['tdcpb-ip'] = p_torrent_msg["ip"]
    msg.attach(MIMEText(_body, 'plain', "utf8"))
    for _receiver in p_config_data["receivers"]:
        if msg.has_key('To'):
            msg.replace_header('To',_receiver)
        else:
            msg['To'] = _receiver
        logger.debug("Sending mail to %s"%(msg['To']))
        smtpSendMail(msg, p_config_data)
        time.sleep(0.5)

def sendMailFtpOk(p_torrent_msg, p_config_data) :
    _subject = "[INDE-CP] Transfert de {} sur la librairie finis".format(p_torrent_msg["name"])
    _tpl = string.Template(TPL_FTP_OK)
    _tpl_values = {
        'name'      : p_torrent_msg["name"],
        }
    _body = _tpl.substitute(_tpl_values)
    msg = MIMEMultipart()
    msg['Subject'] = _subject
    msg['From'] = p_config_data["expeditor"]

    msg['tdcpb-name'] = p_torrent_msg["name"]
    msg['tdcpb-reception'] = p_torrent_msg["time"]
    msg['tdcpb-reception-dir'] = p_torrent_msg["dir"]
    msg['tdcpb-hash'] = p_torrent_msg["hash"]
    msg['tdcpb-host'] = p_torrent_msg["hostname"]
    msg['tdcpb-ip'] = p_torrent_msg["ip"]
    msg['ftp-status'] = "OK"
    msg.attach(MIMEText(_body, 'plain', 'utf-8'))
    for _receiver in p_config_data["receivers"]:
        if msg.has_key('To'):
            msg.replace_header('To',_receiver)
        else:
            msg['To'] = _receiver
        logger.debug("Sending mail to %s"%(msg['To']))
        smtpSendMail(msg, p_config_data)
        time.sleep(0.5)

def sendMailFtpKo(p_torrent_msg, p_config_data) :
    _subject = "[INDE-CP][ERREUR] Transfert de {} sur la librairie ".format(p_torrent_msg["name"])
    _tpl = string.Template(TPL_FTP_KO)
    _tpl_values = {
        'name'      : p_torrent_msg["name"],
        }
    _body = _tpl.substitute(_tpl_values)
    msg = MIMEMultipart()
    msg['Subject'] = _subject
    msg['From'] = p_config_data["expeditor"]

    msg['tdcpb-name'] = p_torrent_msg["name"]
    msg['tdcpb-reception'] = p_torrent_msg["time"]
    msg['tdcpb-reception-dir'] = p_torrent_msg["dir"]
    msg['tdcpb-hash'] = p_torrent_msg["hash"]
    msg['tdcpb-host'] = p_torrent_msg["hostname"]
    msg['tdcpb-ip'] = p_torrent_msg["ip"]
    msg['ftp-status'] = "KO"
    msg.attach(MIMEText(_body, 'plain', 'utf-8'))
    for _receiver in p_config_data["receivers"]:
        if msg.has_key('To'):
            msg.replace_header('To',_receiver)
        else:
            msg['To'] = _receiver
        logger.debug("Sending mail to %s"%(msg['To']))
        smtpSendMail(msg, p_config_data)
        time.sleep(0.5)



def smtpSendMail(p_msg, p_config_data):
    try:
        conn = smtplib.SMTP(p_config_data["smtp"])
    except smtplib.SMTPException:
        logger.error(u"Impossible to send mail: connection impossible")
        return
    except smtplib.socket.error:
        logger.error(u"Impossible to send mail: connection impossible")
        return

    try:
        conn.set_debuglevel(False)
        #conn.login(USERNAME, PASSWORD)
        #print p_msg.as_string()
        conn.sendmail(p_msg['From'], p_msg['To'], p_msg.as_string())
    except:
        logger.error(u"Impossible to send mail")
    finally:
        conn.close()

def WriteFile(p_path, p_contents):
    try:
        f = open(p_path, "w")
        try:
            f.writelines(p_contents) # Write a sequence of strings to a file
        finally:
            f.close()
    except IOError, e:
        logger.error(e)

def get_tinc_ip():
    _ips = commands.getoutput("hostname -I").split()
    for _ip in _ips:
        if _ip.startswith("10.10.10") :
            return _ip
    return None

def get_hostname():
    return socket.gethostname()

def run_seed(torrent_name, config):
    logger.debug('Run seed')
    cmd = ["/usr/bin/transmission-remote",
            config['run-seed-server'],
            "-n",
            config['run-seed-login'],
            "-a",
            os.path.join(config['torrents-path'], "{}.torrent".format(torrent_name)),
            ]
    logger.debug("Cmd: {}".format(" ".join(cmd)))

    sync = SP.Popen(cmd, stdout=SP.PIPE, stderr= SP.PIPE)
    (stdout, stderr) = sync.communicate()
    logger.debug(stdout)
    if sync.returncode:
        _msg = "start seed failed"
        logger.error(_msg)
        raise TdcpbException(_msg)


def main(argv):
    try :
        config_data = parseConfig(CONFIG_FILE)
    except ValueError as err:
        msg = "JSON parse ERROR {}".format(err)
        logger.error(msg)
        return
    except IOError as err:
        msg = "IOError {}".format(err)
        logger.error(msg)
        return


    torrent_msg ={}
    torrent_msg["name"]     = os.environ.get('TR_TORRENT_NAME',  "ERROR_NO_NAME")
    torrent_msg["time"]     = os.environ.get('TR_TIME_LOCALTIME',"ERROR_NO_TIME")
    torrent_msg["dir"]      = os.environ.get('TR_TORRENT_DIR',   "ERROR_NO_DIR")
    torrent_msg["hash"]     = os.environ.get('TR_TORRENT_HASH',  "ERROR_NO_HASH")
    torrent_msg["id"]       = os.environ.get('TR_TORRENT_ID',    "ERROR_NO_ID")
    torrent_msg["ip"]       = get_tinc_ip()
    torrent_msg["hostname"] = get_hostname()
    mycontent = []
    mycontent.append("DCP               : {}\n".format(torrent_msg["name"]) )
    mycontent.append("Date de Reception : {}\n".format(torrent_msg["time"]) )
    mycontent.append("DCP repertoire    : {}\n".format(torrent_msg["dir"])  )
    mycontent.append("DCP hash          : {}\n".format(torrent_msg["hash"]) )
    mycontent.append("DCP id            : {}\n".format(torrent_msg["id"])   )
    mycontent.append("Machine IP        : {}\n".format(torrent_msg["ip"])   )
    mycontent.append("Hostname          : {}\n".format(torrent_msg["hostname"])   )

    #mycontent.append("Date de Generation: %s\n"%(time.strftime("%c")))
    WriteFile("/tmp/tdcpb-{}.log".format(torrent_msg["name"]), mycontent)

    _dir_path = os.path.join(torrent_msg["dir"],torrent_msg["name"])
    # Verify received content
    try:
        tdcpb_check(_dir_path, u'short')
    except TdcpbException as _err:
        logger.error(_err)
        return 1

    sendMailReceptionOk(torrent_msg, config_data)
    if 'run-seed' in config_data and config_data['run-seed'] == True :
        try:
            run_seed(torrent_msg["name"], config_data)
        except TdcpbException as _err:
            logger.error(_err)
    if 'ftp-library' in config_data and config_data['ftp-library'] == True :
        print "FTP vers la librairie"
        try:

            ftp = Lftp(_dir_path, config_data)
            ftp.mirror()
        except:
            #smoething goes wrong in copy
            logger.error("FTP transfer FAIL")
            sendMailFtpKo(torrent_msg, config_data)
        else:
            # send mail copy to library ok
            sendMailFtpOk(torrent_msg, config_data)
            logger.info("FTP transfer OK")

if __name__ == "__main__":
   sys.exit(main(sys.argv))


